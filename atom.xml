<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Justin's Words of Random]]></title>
  <link href="http://hjz.github.com/atom.xml" rel="self"/>
  <link href="http://hjz.github.com/"/>
  <updated>2013-09-08T21:47:13-07:00</updated>
  <id>http://hjz.github.com/</id>
  <author>
    <name><![CDATA[Justin Zhu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How we sped up Elasticsearch queries by 100x - Part 1: Reindexing]]></title>
    <link href="http://hjz.github.com/blog/2013/09/07/elasticsearch-reindexing-with-scala-and-play-2-framework/"/>
    <updated>2013-09-07T10:58:00-07:00</updated>
    <id>http://hjz.github.com/blog/2013/09/07/elasticsearch-reindexing-with-scala-and-play-2-framework</id>
    <content type="html"><![CDATA[<h2>A Little Performance Story</h2>

<p>At <a href="http://iterable.com">Iterable</a>, we use <a href="http://www.elasticsearch.org/">Elasticsearch</a> to store all our email campaign events. This includes email sends, opens and clicks.</p>

<p>For each event, we attach the recipient email and display the events nicely in our campaign dashboard</p>

<p><img src="http://static.iterable.com/iterabletoken/13-09-07-Screenshot%202013-09-07%2011.36.46.png" alt="Iterable Dashboard" /></p>

<p>Notice <code>Unique Opens</code> column above. To calculate that, we need to fetch recipient emails from all the open events and do a unique operation on the emails. As you can imagine, this query is quite inefficient. It took upwards of 5 seconds to fetch 500,000 events, despite gigabit connections between our app server and Elasticsearch.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[2013-08-26 20:57:33,856][WARN ][index.search.slowlog.fetch] [][][0] took[4.2s], took_millis[4207], types[emailOpen], stats[], search_type[QUERY_THEN_FETCH], total_shards[5], source[{"size":500000,"facets":{"dateFacet":{"date_histogram":{"field":"createdAt","interval":"minute"}}}}], extra_source[],
</span><span class='line'>[2013-08-26 20:57:34,293][WARN ][index.search.slowlog.fetch] [][][4] took[4.6s], took_millis[4659], types[emailOpen], stats[], search_type[QUERY_THEN_FETCH], total_shards[5], source[{"size":500000,"facets":{"dateFacet":{"date_histogram":{"field":"createdAt","interval":"minute"}}}}], extra_source[]</span></code></pre></td></tr></table></div></figure>


<p>This sluggishness slowed up in our <a href="http://www.elasticsearch.org/guide/reference/index-modules/slowlog/">Elasticsearch&#8217;s slow log</a>, excerpted above.</p>

<p>To solve this slowness, we had to off load the uniquify queries to the Elasticsearch server and simply return the counts, though this came with a few challenges.</p>

<h2>The Power of the Scroll</h2>

<h3>How tokenization affects your searches</h3>

<p>By default, Elasticsearch applies the <a href="http://www.elasticsearch.org/guide/reference/index-modules/analysis/standard-analyzer/">standard analyzer</a> to fields. For the email address <code>justin.9000@gmail.com</code>, the standard analyzer creates three tokens: <code>justin</code>, <code>9000</code> and <code>gmail.com</code>. If we&#8217;re to search the field with a terms facet to get unique email counts, the result will include an entry for each token, which inflates the unique count.</p>

<p>The <a href="https://github.com/polyfractal/elasticsearch-inquisitor">Elasticsearch inquisitor plugin</a> has a handy tool that shows tokenizations with different analyzers.</p>

<p><img src="http://static.iterable.com/iterabletoken/13-09-07-inquisitor-plugin.png" alt="Inquisitor analyzer tool" /></p>

<h3>Taming the scroll with Scala</h3>

<p>We must set the mapping of the email field to <code>not_analyzed</code> for Elasticsearch to return the email as one token. However, changing a mapping requires reindexing of the data for the new mapping to take effect.</p>

<p>As of Elasticsearch 0.90.3, there is no built in reindexing support. Instead, we rely on the <a href="http://www.elasticsearch.org/guide/reference/api/search/scroll/">scroll query</a> which essentially maintains the query results in memory, for performance and consistency reasons. There will be some data loss in the next index which can be fixed with another scroll query.</p>

<p>Here&#8217;s the code to do it in our favorite language, Scala</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">reindexType</span><span class="o">(</span><span class="n">srcIndex</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">newIndex</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">searchType</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">client</span><span class="k">:</span> <span class="kt">TransportClient</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">scrollTime</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">TimeValue</span><span class="o">(</span><span class="mi">600000</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">scrollSize</span> <span class="k">=</span> <span class="mi">10000</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Setup the query</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">query</span> <span class="k">=</span> <span class="n">client</span><span class="o">.</span><span class="n">prepareSearch</span><span class="o">(</span><span class="n">srcIndex</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">setTypes</span><span class="o">(</span><span class="n">searchType</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">setScroll</span><span class="o">(</span><span class="n">scrollTime</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">setQuery</span><span class="o">(</span><span class="nc">QueryBuilders</span><span class="o">.</span><span class="n">matchAllQuery</span><span class="o">())</span>
</span><span class='line'>    <span class="o">.</span><span class="n">setSize</span><span class="o">(</span><span class="n">scrollSize</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">var</span> <span class="n">scrollResp</span> <span class="k">=</span> <span class="n">query</span><span class="o">.</span><span class="n">execute</span><span class="o">().</span><span class="n">actionGet</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Keep processing results if hits are non empty</span>
</span><span class='line'>  <span class="k">while</span><span class="o">(</span><span class="n">scrollResp</span><span class="o">.</span><span class="n">getHits</span><span class="o">.</span><span class="n">hits</span><span class="o">().</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Prepare a bulk reindex request</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">bulkReq</span> <span class="k">=</span> <span class="n">client</span><span class="o">.</span><span class="n">prepareBulk</span><span class="o">()</span>
</span><span class='line'>    <span class="n">scrollResp</span><span class="o">.</span><span class="n">getHits</span><span class="o">.</span><span class="n">hits</span><span class="o">().</span><span class="n">foreach</span> <span class="o">{</span> <span class="n">hit</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">bulkReq</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="n">client</span><span class="o">.</span><span class="n">prepareIndex</span><span class="o">(</span><span class="n">newIndex</span><span class="o">,</span> <span class="n">searchType</span><span class="o">).</span><span class="n">setSource</span><span class="o">(</span><span class="n">hit</span><span class="o">.</span><span class="n">source</span><span class="o">()))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Reindex the hits</span>
</span><span class='line'>    <span class="n">bulkReq</span><span class="o">.</span><span class="n">execute</span><span class="o">().</span><span class="n">actionGet</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Get more entries from the old index</span>
</span><span class='line'>    <span class="n">scrollResp</span> <span class="k">=</span> <span class="n">client</span><span class="o">.</span><span class="n">prepareSearchScroll</span><span class="o">(</span><span class="n">scrollResp</span><span class="o">.</span><span class="n">getScrollId</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">setScroll</span><span class="o">(</span><span class="n">scrollTime</span><span class="o">).</span><span class="n">execute</span><span class="o">().</span><span class="n">actionGet</span><span class="o">()</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above fetches the <code>_source</code> field from each entry and reindexes to <code>newIndex</code>. Be sure to set up the new mapping properly on the new index first, otherwise all that effort was for naught.</p>

<p>Once the data is in the new index, the last step is to delete the old index and create an <a href="http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/">alias</a> to the new one.o</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">curl</span> <span class="o">-</span><span class="nc">XPOST</span> <span class="-Symbol">&#39;http</span><span class="o">://</span><span class="n">localhost</span><span class="k">:</span><span class="err">9200</span><span class="kt">/</span><span class="k">_</span><span class="kt">aliases</span><span class="err">&#39;</span> <span class="kt">-d</span> <span class="err">&#39;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="err">&quot;</span><span class="kt">actions</span><span class="err">&quot;</span> <span class="kt">:</span> <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span> <span class="err">&quot;</span><span class="kt">add</span><span class="err">&quot;</span> <span class="kt">:</span> <span class="o">{</span> <span class="err">&quot;</span><span class="kt">index</span><span class="err">&quot;</span> <span class="kt">:</span> <span class="err">&quot;</span><span class="kt">the_old_index</span><span class="err">&quot;</span>, <span class="err">&quot;</span><span class="kt">alias</span><span class="err">&quot;</span> <span class="kt">:</span> <span class="err">&quot;</span><span class="kt">a_new_index</span><span class="err">&quot;</span> <span class="o">}</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">}</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can create the alias through the <a href="http://mobz.github.io/elasticsearch-head/">ElasticSearch Head plugin</a> which also nicely displays the aliases on an index.</p>

<p><img src="http://static.iterable.com/iterable/13-09-09-ElasticSearch_Head-2.png" alt="Elasticsearch Head Alias" /></p>

<h2>Coming up next&#8230;</h2>

<p>I&#8217;ll go into how we ran the uniquification queries on the server side, now that the email field is not analyzed and treated as one token in the new index.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eat24 coupons the dirty way]]></title>
    <link href="http://hjz.github.com/blog/2013/01/13/get-eat24hours-coupons-the-dirty-way/"/>
    <updated>2013-01-13T15:13:00-08:00</updated>
    <id>http://hjz.github.com/blog/2013/01/13/get-eat24hours-coupons-the-dirty-way</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been using <a href="http://eat24hours.com">Eat24</a> a lot recently to order food and they always seems to have coupons on their Facebook page.</p>

<p>Here&#8217;s a one-liner to get the latest coupons. Simply fill in your access token:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl https://graph.facebook.com/eat24/feed?access_token<span class="o">={</span>your_token<span class="o">}</span> <span class="se">\</span>
</span><span class='line'>| python -mjson.tool | grep <span class="s2">&quot;coupon code &#39;&quot;</span> <span class="se">\</span>
</span><span class='line'>| sed -r <span class="s2">&quot;s/.*code &#39;([a-z]+)&#39;.*/\1/g&quot;</span> | sort | uniq
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrapping AngularJS with Play 2]]></title>
    <link href="http://hjz.github.com/blog/2013/01/10/boostrapping-angularjs-with-play-2/"/>
    <updated>2013-01-10T13:55:00-08:00</updated>
    <id>http://hjz.github.com/blog/2013/01/10/boostrapping-angularjs-with-play-2</id>
    <content type="html"><![CDATA[<h2>AngularJS Primer</h2>

<p><a href="http://angularjs.org">AngularJS</a> is a javascript framework by Google that makes 2-way data binding between DOM elements and JS objects seamless.</p>

<p>I&#8217;ve always been repulsed by the amount of hacks and lack of abstractions prevalent in front-end development. AngularJS follows the Model View ViewModel pattern which aims to separate view code from application logic. This is achiveved through a ViewModel which exposes and connects objects in the model to elements in the view. For AngularJS, this is the <code>$scope</code> object.</p>

<p>For example, to bind an input field to a variable <code>searchModel</code> on the scope:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;searchModel&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Any change to the input field is reflected in <code>$scope.searchModel</code> and vice versa.</p>

<p>Another neat feature of AngularJS is the ability to create <a href="http://docs.angularjs.org/guide/directive">directives</a> that extend html. For instance you can create an <code>on-focus</code> directive that calls a method when an element is focused.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;searchModel&quot;</span> <span class="na">on-focus=</span><span class="s">&quot;searchModel = &#39;&#39;&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The example above clears the input text when the element is focused. I&#8217;ll touch more on creating directives in a future post.</p>

<h2>Integration with Play 2 framework</h2>

<h3>Bootstrapping AngularJS</h3>

<p>Play is a rails inspired MVC framework built on the JVM. It has APIs for both Scala and Java and uses class reloading to quickly surface changes in the browser. A nice feature is the templating system that uses Scala to generate html. A template gets compiled to a Scala object and can be called from controllers, with the input type checked.</p>

<p>One pattern I&#8217;ve employed is bootstrapping AngularJS controllers in the template:</p>

<figure class='code'><figcaption><span>items.scala.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@(items: Seq[JSItem])
</span><span class='line'>
</span><span class='line'>@import com.codahale.jerkson.Json
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">items</span> <span class="o">=</span> <span class="err">@</span><span class="nx">Html</span><span class="p">(</span><span class="nx">Json</span><span class="p">.</span><span class="nx">generate</span><span class="p">(</span><span class="nx">items</span><span class="p">));</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>@main(&quot;Items Page&quot;) {
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;ItemsCtrl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>   There are {{items.length}} items
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Then in the controller on the client:</p>

<figure class='code'><figcaption><span>controllers.cofffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">ItemsCtrl = </span><span class="nf">($scope) -&gt;</span>
</span><span class='line'>  <span class="nv">$scope.items = </span><span class="nx">items</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice the input to template is a sequence of JSItems, which is a case class. This is just a compact version of the Item model that gets passed in to the client. We generate the items as json using jerkson which creates objects with the same fields as those in a case class. <code>@Html</code> tells Play not to escape the output and render it literally.</p>

<h3>Updating the model on the server</h3>

<p>Typically, we want the ability to update the model on the client side and update the server:</p>

<figure class='code'><figcaption><span>controllers.cofffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">ItemsCtrl = </span><span class="nf">($scope, $http) -&gt;</span>
</span><span class='line'>  <span class="nv">$scope.items = </span><span class="nx">items</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$scope.updateItems = </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">$http</span><span class="p">.</span><span class="nx">post</span> <span class="s">&#39;/items&#39;</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">success</span> <span class="nf">-&gt;</span>
</span><span class='line'>        <span class="c1"># Success callback</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">error</span> <span class="nf">(data, status)-&gt;</span>
</span><span class='line'>        <span class="nx">$console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&quot;Failed with status </span><span class="si">#{</span><span class="nx">status</span><span class="si">}</span><span class="s">, data: </span><span class="si">#{</span><span class="nx">status</span><span class="si">}</span><span class="s">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>updateItems</code> method uses AngularJS <a href="http://docs.angularjs.org/api/ng.$http">$http</a> service which wraps ajax calls in <a href="http://docs.angularjs.org/api/ng.$q">promises</a>. It is similar in concept to a <code>scala.concurrent.Future</code> but with a much simpiler api. You can actually assign AngularJS promises to variables bound in the view that will re-render asynchronously once the promise is resolved.</p>

<p>On the server side, we can simply parse the Json back to the case class that it rendered from:</p>

<figure class='code'><figcaption><span>routes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">POST</span> <span class="o">/</span><span class="n">items</span> <span class="nc">Application</span><span class="o">.</span><span class="n">updateItems</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Application.scala</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">com.codahale.jerkson.Json</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Application</span> <span class="k">extends</span> <span class="nc">Controller</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">updateItems</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span> <span class="n">request</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">json</span> <span class="k">=</span> <span class="n">request</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">asJson</span><span class="o">.</span><span class="n">get</span><span class="o">.</span><span class="n">toString</span><span class="o">()</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">items</span> <span class="k">=</span> <span class="nc">Json</span><span class="o">.</span><span class="n">parse</span><span class="o">[</span><span class="kt">Seq</span><span class="o">[</span><span class="kt">Item</span><span class="o">]](</span><span class="n">json</span><span class="o">)</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h3>How to make all this easier</h3>

<p>With Scala 2.10 macros, you could imagine automatically creating the JS case classes from a subset of fields from the database model and generating customizable CRUD controllers.</p>
]]></content>
  </entry>
  
</feed>
